// generated by Fast Light User Interface Designer (fluid) version 2.0100

#include "CubeViewUI.h"

inline void CubeViewUI::cb_zoom_i(gnui::ValueSlider* o, void*) {
  cube->setsize((float) o->value());
  cube->redraw();
}
void CubeViewUI::cb_zoom(gnui::ValueSlider* o, void* v) {
  ((CubeViewUI*)(o->parent()->parent()->user_data()))->cb_zoom_i(o,v);
}

inline void CubeViewUI::cb_vrot_i(gnui::ThumbWheel* o, void*) {
  cube->v_angle((float) o->value());
  cube->redraw();
}
void CubeViewUI::cb_vrot(gnui::ThumbWheel* o, void* v) {
  ((CubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_vrot_i(o,v);
}

inline void CubeViewUI::cb_ypan_i(gnui::Slider* o, void*) {
  cube->pany((float) o->value());
  cube->redraw();
}
void CubeViewUI::cb_ypan(gnui::Slider* o, void* v) {
  ((CubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_ypan_i(o,v);
}

inline void CubeViewUI::cb_xpan_i(gnui::Slider* o, void*) {
  cube->panx((float) o->value());
  cube->redraw();
}
void CubeViewUI::cb_xpan(gnui::Slider* o, void* v) {
  ((CubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_xpan_i(o,v);
}

inline void CubeViewUI::cb_hrot_i(gnui::ThumbWheel* o, void*) {
  cube->h_angle((float) o->value());
  cube->redraw();
}
void CubeViewUI::cb_hrot(gnui::ThumbWheel* o, void* v) {
  ((CubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_hrot_i(o,v);
}

CubeViewUI::CubeViewUI() {
  gnui::Window* w;
   {gnui::Window* o = mainWindow = new gnui::Window(415, 406, "CubeView");
    w = o;
    o->user_data((void*)(this));
    o->begin();
     {gnui::Group* o = new gnui::Group(3, 3, 409, 400);
      o->begin();
       {gnui::ValueSlider* o = zoom = new gnui::ValueSlider(101, 0, 227, 19, "Zoom");
        o->labelfont(gnui::HELVETICA_BOLD);
        o->labelcolor((gnui::Color)136);
        o->minimum(1);
        o->maximum(50);
        o->step(0.1);
        o->value(10);
        o->callback((gnui::Callback*)cb_zoom);
        o->align(gnui::ALIGN_LEFT);
      }
       {gnui::Group* o = VChange = new gnui::Group(0, 97, 37, 192);
        o->set_vertical();
        o->begin();
         {gnui::ThumbWheel* o = vrot = new gnui::ThumbWheel(0, 0, 17, 186, "V Rot");
          o->set_vertical();
          o->labeltype(gnui::NO_LABEL);
          o->minimum(-180);
          o->maximum(180);
          o->step(1);
          o->callback((gnui::Callback*)cb_vrot);
          o->align(gnui::ALIGN_TOP|gnui::ALIGN_WRAP);
        }
         {gnui::Slider* o = ypan = new gnui::Slider(20, 0, 17, 186);
          o->set_vertical();
          o->labeltype(gnui::NO_LABEL);
          o->labelcolor((gnui::Color)136);
          o->minimum(-25);
          o->maximum(25);
          o->step(0.1);
          o->callback((gnui::Callback*)cb_ypan);
          o->align(gnui::ALIGN_CENTER);
        }
        o->end();
      }
       {gnui::Group* o = HChange = new gnui::Group(115, 359, 190, 40);
        o->begin();
         {gnui::Slider* o = xpan = new gnui::Slider(2, 2, 186, 17);
          o->labeltype(gnui::NO_LABEL);
          o->labelcolor((gnui::Color)136);
          o->minimum(25);
          o->maximum(-25);
          o->step(0.1);
          o->callback((gnui::Callback*)cb_xpan);
          o->align(gnui::ALIGN_CENTER);
        }
         {gnui::ThumbWheel* o = hrot = new gnui::ThumbWheel(2, 21, 186, 17, "H Rotation");
          o->labeltype(gnui::NO_LABEL);
          o->minimum(-180);
          o->maximum(180);
          o->step(1);
          o->callback((gnui::Callback*)cb_hrot);
          o->align(gnui::ALIGN_LEFT);
        }
        o->end();
      }
       {gnui::Group* o = MainView = new gnui::Group(41, 24, 333, 333);
        o->begin();
         {gnui::InvisibleBox* o = cframe = new gnui::InvisibleBox(0, 0, 333, 333);
          o->box(gnui::DOWN_BOX);
          o->color((gnui::Color)56);
          o->selection_color((gnui::Color)69);
        }
         {cube = new CubeView(2, 2, 329, 329);
        }
        o->end();
      }
      o->end();
      gnui::Group::current()->resizable(o);
    }
    o->end();
  }
}

void CubeViewUI::show() {
  mainWindow->show();
}
