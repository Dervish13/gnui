// generated by Fast Light User Interface Designer (fluid) version 2.0002

#include "resizable.h"

#include <fltk/run.h>

int main (int argc, char **argv) {

  gnui::Window* w;
   {gnui::Window* o = new gnui::Window(560, 470);
    w = o;
    o->begin();
     {gnui::MenuBar* o = new gnui::MenuBar(515, 0, 45, 25);
      o->tooltip("A right-justified help item can be made by making a second menubar and puttin\
g it to the right of the resizable().");
      o->begin();
       {gnui::ItemGroup* o = new gnui::ItemGroup("Help");
        o->begin();
        new gnui::Item("About...");
        new gnui::Item("Chapter 1");
        o->end();
      }
      o->end();
    }
     {gnui::MenuBar* o = new gnui::MenuBar(0, 0, 515, 25);
      o->begin();
      new gnui::Item("This");
      new gnui::Item("is");
      new gnui::Item("a");
      new gnui::Item("Menu");
      new gnui::Item("Bar");
      o->end();
    }
     {gnui::InvisibleBox* o = new gnui::InvisibleBox(95, 25, 465, 419, "\nThis program demonstrates how you set the resizable() of a window to get th\
ings to resize the way you want.");
      o->box(gnui::FLAT_BOX);
      o->color((gnui::Color)19);
      o->labelcolor((gnui::Color)7);
      o->align(gnui::ALIGN_TOP|gnui::ALIGN_INSIDE|gnui::ALIGN_CLIP|gnui::ALIGN_WRAP);
    }
     {gnui::Button* o = new gnui::Button(0, 25, 95, 25, "These");
      o->color((gnui::Color)47);
    }
     {gnui::Button* o = new gnui::Button(0, 50, 95, 25, "are some");
      o->color((gnui::Color)47);
    }
     {gnui::Button* o = new gnui::Button(0, 75, 95, 25, "buttons");
      o->color((gnui::Color)47);
    }
     {gnui::Button* o = new gnui::Button(0, 100, 95, 25, "we don't want");
      o->color((gnui::Color)47);
    }
     {gnui::Button* o = new gnui::Button(0, 125, 95, 25, "to resize.");
      o->color((gnui::Color)47);
    }
     {gnui::Button* o = new gnui::Button(0, 150, 95, 25, "Things that");
      o->color((gnui::Color)0x8e6f8c00);
    }
     {gnui::Button* o = new gnui::Button(0, 175, 95, 25, "overlap the box");
      o->color((gnui::Color)0x8e6f8c00);
    }
     {gnui::Button* o = new gnui::Button(0, 200, 95, 25, "will scale.");
      o->color((gnui::Color)0x8e6f8c00);
    }
     {gnui::Group* o = new gnui::Group(0, 225, 95, 190, "A group");
      o->box(gnui::ENGRAVED_BOX);
      o->labeltype(gnui::ENGRAVED_LABEL);
      o->labelcolor((gnui::Color)49);
      o->align(gnui::ALIGN_BOTTOM|gnui::ALIGN_INSIDE);
      o->tooltip("This group has resizable(0) (this is the default).  But you can set a group's\
 resizable to nest different resize behavior.");
      o->begin();
       {gnui::Button* o = new gnui::Button(5, 5, 85, 25, "You can put");
        o->color((gnui::Color)47);
      }
       {gnui::Button* o = new gnui::Button(5, 30, 85, 25, "them inside");
        o->color((gnui::Color)47);
      }
       {gnui::Button* o = new gnui::Button(5, 55, 85, 25, "a group to");
        o->color((gnui::Color)47);
      }
       {gnui::Button* o = new gnui::Button(5, 80, 85, 25, "stop scaling.");
        o->color((gnui::Color)47);
      }
      o->end();
    }
     {gnui::Button* o = new gnui::Button(0, 419, 95, 25, "nonscaling");
      o->color((gnui::Color)47);
    }
     {gnui::InvisibleBox* o = new gnui::InvisibleBox(0, 444, 460, 25, "This status message will resize horizontally only.");
      o->box(gnui::BORDER_BOX);
      o->color((gnui::Color)55);
      o->align(gnui::ALIGN_LEFT|gnui::ALIGN_INSIDE);
    }
    new gnui::Button(460, 445, 25, 25, "@<<");
    new gnui::Button(485, 445, 25, 25, "@<");
    new gnui::Button(510, 445, 25, 25, "@>");
    new gnui::Button(535, 445, 25, 25, "@>>");
     {gnui::InvisibleBox* o = new gnui::InvisibleBox(95, 150, 365, 270, "This is the resizable() of the window.\nIt is normally invisible.");
      o->box(gnui::BORDER_BOX);
      o->color((gnui::Color)37);
      o->labelcolor((gnui::Color)1);
      o->align(gnui::ALIGN_CLIP|gnui::ALIGN_WRAP);
      gnui::Group::current()->resizable(o);
      o->tooltip("To make it invisible, use an Fl_Box with the default box(FL_NO_BOX) and no la\
bel.\n\nFltk sets the window's minimum size such that this widget's minimum si\
ze is 100, unless it starts out smaller than that.  You can override this defa\
ult by calling size_range() on the window.");
    }
    o->end();
  }
  // w->size_range(w->w()-w->resizable()->w(), w->h()-w->resizable()->h());
  w->show(argc, argv);
  return  gnui::run();
}
