// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "template_panel.h"
// Code for //\n// "$Id$"\n//\n// FLUID template support for ...
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <fltk/string.h>
#include <fltk/events.h>
#include <fltk/filename.h>
#include <fltk/ask.h>
#include <fltk/SharedImage.h>
#include "PrefsData.h"
#if defined(WIN32) && !defined(__CYGWIN__)
#include <io.h>
#else
#include <unistd.h>
#endif // WIN32 && !__CYGWIN__

gnui::DoubleBufferWindow *template_panel=(gnui::DoubleBufferWindow *)0;

static void cb_template_panel(gnui::DoubleBufferWindow*, void*) {
  gnui::SharedImage *img = (gnui::SharedImage *)template_preview->image();
  if (img) img->remove();
  template_preview->image((gnui::Symbol*)0);
  
  template_browser->deselect();
  template_name->value("");
  template_instance->value("");
  template_panel->hide();
}

gnui::Browser *template_browser=(gnui::Browser *)0;

gnui::InvisibleBox *template_preview=(gnui::InvisibleBox *)0;

gnui::Input *template_name=(gnui::Input *)0;

static void cb_template_name(gnui::Input*, void*) {
  if (strlen(template_name->value())) {
    template_submit->activate();
    if (gnui::event_key() == gnui::KeypadEnter || gnui::event_key() == gnui::ReturnKey) template_panel->hide();
  } else template_submit->deactivate();
}

gnui::Input *template_instance=(gnui::Input *)0;

gnui::Button *template_delete=(gnui::Button *)0;

static void cb_Cancel(gnui::Button*, void*) {
  gnui::SharedImage *img = (gnui::SharedImage *)template_preview->image();
  if (img) img->remove();
  template_preview->image((gnui::Symbol*)0);
  
  template_browser->deselect();
  template_name->value("");
  template_instance->value("");
  template_panel->hide();
}

gnui::ReturnButton *template_submit=(gnui::ReturnButton *)0;

static void cb_template_submit(gnui::ReturnButton*, void*) {
  gnui::SharedImage *img = 
  	 (gnui::SharedImage *)template_preview->image();
  if (img) img->remove();
  template_preview->image((gnui::Symbol*)0);
  
  template_panel->hide();
}

gnui::DoubleBufferWindow* make_template_panel() {
  gnui::DoubleBufferWindow* w;
   {gnui::DoubleBufferWindow* o = template_panel = new gnui::DoubleBufferWindow(460, 355, "New/Save Template");
    w = o;
    o->type(241);
    o->shortcut(0xff1b);
    o->callback((gnui::Callback*)cb_template_panel);
    o->begin();
     {gnui::Browser* o = template_browser = new gnui::Browser(10, 28, 180, 250, "Available Templates:");
      o->set_vertical();
      o->labelfont(gnui::HELVETICA_BOLD);
      o->callback((gnui::Callback*)template_browser_cb);
      o->align(gnui::ALIGN_TOP|gnui::ALIGN_LEFT);
      o->when(gnui::WHEN_CHANGED);
    }
     {gnui::InvisibleBox* o = template_preview = new gnui::InvisibleBox(200, 28, 250, 250);
      o->box(gnui::THIN_DOWN_BOX);
      o->align(gnui::ALIGN_TOP|gnui::ALIGN_LEFT|gnui::ALIGN_CENTER|gnui::ALIGN_CLIP);
      gnui::Group::current()->resizable(o);
    }
     {gnui::Input* o = template_name = new gnui::Input(124, 288, 326, 25, "Template Name:");
      o->labelfont(gnui::HELVETICA_BOLD);
      o->textfont(gnui::COURIER);
      o->callback((gnui::Callback*)cb_template_name);
      o->when(gnui::WHEN_NEVER);
    }
     {gnui::Input* o = template_instance = new gnui::Input(124, 288, 326, 25, "Instance Name:");
      o->labelfont(gnui::HELVETICA_BOLD);
      o->textfont(gnui::COURIER);
      o->hide();
    }
     {gnui::Group* o = new gnui::Group(10, 323, 440, 25);
      o->begin();
       {gnui::Button* o = template_delete = new gnui::Button(0, 0, 133, 25, "Delete Template");
        o->callback((gnui::Callback*)template_delete_cb);
      }
       {gnui::InvisibleBox* o = new gnui::InvisibleBox(143, 0, 126, 25);
        gnui::Group::current()->resizable(o);
      }
       {gnui::Button* o = new gnui::Button(279, 0, 72, 25, "Cancel");
        o->callback((gnui::Callback*)cb_Cancel);
      }
       {gnui::ReturnButton* o = template_submit = new gnui::ReturnButton(361, 0, 79, 25, "Save");
        o->shortcut(0xff0d);
        o->callback((gnui::Callback*)cb_template_submit);
      }
      o->end();
    }
    o->end();
    o->set_modal();
  }
  return  w;
}

void template_clear() {
  // in fltk2 no need to delete label because they have the COPIED 
  // internal flags set so that it will delete automatically on destruction
  template_browser->deselect();
  template_browser->clear();
}

void template_load() {
  int i;
  char name[1024], filename[1024], path[1024], *ptr;
  struct dirent **files;
  int num_files;
  
  prefs.getUserdataPath(path, sizeof(path));
  strlcat(path, "templates", sizeof(path));
  
  num_files = gnui::filename_list(path, &files);
  
  for (i = 0; i < num_files; i ++) {
    if (gnui::filename_match(files[i]->d_name, "*.fl")) {
      // Format the name as the filename with "_" replaced with " "
      // and without the trailing ".fl"...
      strlcpy(name, files[i]->d_name, sizeof(name));
      *strstr(name, ".fl") = '\0';
  
      for (ptr = name; *ptr; ptr ++) {
        if (*ptr == '_') *ptr = ' ';
      }
  
      // Add the template to the browser...
      snprintf(filename, sizeof(filename), "%s/%s", path, files[i]->d_name);
      template_browser->add(name, strdup(filename));
    }
  
    free(files[i]);
  }
  
  if (num_files > 0) free(files);
}
// Code for //\n// End of "$Id$".\n//
