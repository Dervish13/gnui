// generated by Fast Light User Interface Designer (fluid) version 2.0100

#include "coding_style.h"
static int brace_style;
static int no_space_parens;
static int brace_functions;
static int indent_tabs;
static int tab_size;
static int always_return_parens;
static int indent_code;

static void use_coding_style() {
  gbrace_style = brace_style;
  gno_space_parens = no_space_parens;
  gbrace_functions = brace_functions;
  gindent_tabs = indent_tabs;
  gtab_size = tab_size;
  galways_return_parens = always_return_parens;
}

static gnui::RadioButton *pStyle1=(gnui::RadioButton *)0;

static void cb_pStyle1(gnui::RadioButton* o, void*) {
  if(o->value())
     brace_style = 1;
}

static gnui::RadioButton *pStyle2=(gnui::RadioButton *)0;

static void cb_pStyle2(gnui::RadioButton* o, void*) {
  if(o->value())
     brace_style = 2;
}

static gnui::RadioButton *pStyle3=(gnui::RadioButton *)0;

static void cb_pStyle3(gnui::RadioButton* o, void*) {
  if(o->value())
     brace_style = 3;
}

static gnui::CheckButton *pNoSpaceParens=(gnui::CheckButton *)0;

static void cb_pNoSpaceParens(gnui::CheckButton* o, void*) {
  no_space_parens = o->value();;
}

static gnui::CheckButton *pBraceFuncs=(gnui::CheckButton *)0;

static void cb_pBraceFuncs(gnui::CheckButton* o, void*) {
  brace_functions = o->value();
}

static gnui::ValueInput *pTabSize=(gnui::ValueInput *)0;

static void cb_pTabSize(gnui::ValueInput* o, void*) {
  tab_size = (int)o->value();
}

static gnui::CheckButton *pIndentTabs=(gnui::CheckButton *)0;

static void cb_pIndentTabs(gnui::CheckButton* o, void*) {
  indent_tabs = o->value();
  if(o->value())
      pTabSize->hide();
  else
     pTabSize->show();
}

static gnui::CheckButton *pIndentCode=(gnui::CheckButton *)0;

static void cb_pIndentCode(gnui::CheckButton* o, void*) {
  indent_code = o->value();
}

static gnui::CheckButton *pReturnParens=(gnui::CheckButton *)0;

static void cb_pReturnParens(gnui::CheckButton* o, void*) {
  always_return_parens = o->value();
}

static void cb_Cancel(gnui::Button* o, void*) {
  o->window()->hide();
}

static void cb_Save(gnui::Button* o, void*) {
  use_coding_style();
  save_coding_style();
  o->window()->hide();
}

static void cb_Use(gnui::Button* o, void*) {
  use_coding_style();
  o->window()->hide();
}

gnui::Window* make_codingstyle_window() {
  gnui::Window* w;
   {gnui::Window* o = new gnui::Window(310, 255);
    w = o;
    o->begin();
     {gnui::TabGroup* o = new gnui::TabGroup(0, 0, 303, 220);
      o->box(gnui::EMBOSSED_BOX);
      o->begin();
       {gnui::Group* o = new gnui::Group(0, 25, 303, 195, "Brace Style");
        o->selection_color((gnui::Color)0x7f00);
        o->begin();
         {gnui::Group* o = new gnui::Group(14, 10, 282, 134);
          o->box(gnui::ENGRAVED_BOX);
          o->align(gnui::ALIGN_TOP|gnui::ALIGN_LEFT);
          o->begin();
           {gnui::Widget* o = new gnui::Widget(20, 6, 47, 20, "if ( x ) {");
            o->box(gnui::NO_BOX);
            o->align(gnui::ALIGN_LEFT|gnui::ALIGN_CENTER|gnui::ALIGN_INSIDE);
          }
           {gnui::Widget* o = new gnui::Widget(20, 25, 45, 20, "++y;");
            o->box(gnui::NO_BOX);
            o->align(gnui::ALIGN_RIGHT|gnui::ALIGN_CENTER|gnui::ALIGN_INSIDE);
          }
           {gnui::Widget* o = new gnui::Widget(20, 41, 36, 20, "}");
            o->box(gnui::NO_BOX);
            o->align(gnui::ALIGN_LEFT|gnui::ALIGN_CENTER|gnui::ALIGN_INSIDE);
          }
           {gnui::Widget* o = new gnui::Widget(114, 6, 47, 20, "if ( x )");
            o->box(gnui::NO_BOX);
            o->align(gnui::ALIGN_LEFT|gnui::ALIGN_CENTER|gnui::ALIGN_INSIDE);
          }
           {gnui::Widget* o = new gnui::Widget(114, 25, 36, 20, "{");
            o->box(gnui::NO_BOX);
            o->align(gnui::ALIGN_LEFT|gnui::ALIGN_CENTER|gnui::ALIGN_INSIDE);
          }
           {gnui::Widget* o = new gnui::Widget(115, 42, 46, 20, "++y;");
            o->box(gnui::NO_BOX);
            o->align(gnui::ALIGN_RIGHT|gnui::ALIGN_CENTER|gnui::ALIGN_INSIDE);
          }
           {gnui::Widget* o = new gnui::Widget(114, 59, 36, 20, "}");
            o->box(gnui::NO_BOX);
            o->align(gnui::ALIGN_LEFT|gnui::ALIGN_CENTER|gnui::ALIGN_INSIDE);
          }
           {gnui::Widget* o = new gnui::Widget(201, 6, 47, 20, "if ( x )");
            o->box(gnui::NO_BOX);
            o->align(gnui::ALIGN_LEFT|gnui::ALIGN_CENTER|gnui::ALIGN_INSIDE);
          }
           {gnui::Widget* o = new gnui::Widget(201, 25, 36, 20, "{");
            o->box(gnui::NO_BOX);
            o->align(gnui::ALIGN_RIGHT|gnui::ALIGN_CENTER|gnui::ALIGN_INSIDE);
          }
           {gnui::Widget* o = new gnui::Widget(227, 42, 34, 22, "++y;");
            o->box(gnui::NO_BOX);
            o->align(gnui::ALIGN_RIGHT|gnui::ALIGN_CENTER|gnui::ALIGN_INSIDE);
          }
           {gnui::Widget* o = new gnui::Widget(201, 59, 36, 20, "}");
            o->box(gnui::NO_BOX);
            o->align(gnui::ALIGN_RIGHT|gnui::ALIGN_CENTER|gnui::ALIGN_INSIDE);
          }
           {gnui::RadioButton* o = pStyle1 = new gnui::RadioButton(16, 84, 66, 25, "Style 1");
            o->set_flag(gnui::STATE);
            o->callback((gnui::Callback*)cb_pStyle1);
          }
           {gnui::RadioButton* o = pStyle2 = new gnui::RadioButton(109, 84, 66, 25, "Style 2");
            o->callback((gnui::Callback*)cb_pStyle2);
          }
           {gnui::RadioButton* o = pStyle3 = new gnui::RadioButton(200, 84, 66, 25, "Style 3");
            o->callback((gnui::Callback*)cb_pStyle3);
          }
          o->end();
        }
         {gnui::CheckButton* o = pNoSpaceParens = new gnui::CheckButton(15, 147, 195, 22, "No space before parentheses");
          o->callback((gnui::Callback*)cb_pNoSpaceParens);
        }
         {gnui::CheckButton* o = pBraceFuncs = new gnui::CheckButton(15, 170, 174, 22, "Apply to function braces");
          o->set_flag(gnui::STATE);
          o->callback((gnui::Callback*)cb_pBraceFuncs);
        }
        o->end();
      }
       {gnui::Group* o = new gnui::Group(0, 25, 303, 183, "Other");
        o->hide();
        o->begin();
         {gnui::Group* o = new gnui::Group(11, 22, 218, 90, "Indentation");
          o->box(gnui::ENGRAVED_BOX);
          o->align(gnui::ALIGN_TOP|gnui::ALIGN_LEFT);
          o->begin();
           {gnui::ValueInput* o = pTabSize = new gnui::ValueInput(129, 33, 31, 22, "Tab size for indents");
            o->maximum(12);
            o->value(2);
            o->callback((gnui::Callback*)cb_pTabSize);
          }
           {gnui::CheckButton* o = pIndentTabs = new gnui::CheckButton(13, 7, 114, 22, "Indent with tabs");
            o->callback((gnui::Callback*)cb_pIndentTabs);
          }
           {gnui::CheckButton* o = pIndentCode = new gnui::CheckButton(14, 58, 151, 22, "Indent code blocks");
            o->callback((gnui::Callback*)cb_pIndentCode);
          }
          o->end();
        }
         {gnui::CheckButton* o = pReturnParens = new gnui::CheckButton(10, 120, 220, 22, "Always use parentheses on return");
          o->callback((gnui::Callback*)cb_pReturnParens);
        }
        o->end();
      }
      o->end();
    }
     {gnui::Button* o = new gnui::Button(106, 223, 59, 25, "Cancel");
      o->callback((gnui::Callback*)cb_Cancel);
    }
     {gnui::Button* o = new gnui::Button(171, 223, 59, 25, "Save");
      o->callback((gnui::Callback*)cb_Save);
    }
     {gnui::Button* o = new gnui::Button(236, 223, 59, 25, "Use");
      o->callback((gnui::Callback*)cb_Use);
    }
    o->end();
    o->resizable(o);
  }
  return  w;
}

void load_codingstyle_window() {
  brace_style = gbrace_style;
  no_space_parens = gno_space_parens;
  brace_functions = gbrace_functions;  
  indent_tabs = gindent_tabs;
  tab_size = gtab_size;
  always_return_parens = galways_return_parens;
  indent_code = gindent_code;
  pStyle1->value(gbrace_style == 1);
  pStyle2->value(gbrace_style == 2);
  pStyle3->value(gbrace_style == 3);
  pNoSpaceParens->value(gno_space_parens);
  pBraceFuncs->value(gbrace_functions);
  pIndentTabs->value(gindent_tabs);
  pTabSize->value(gtab_size);
  pReturnParens->value(galways_return_parens);
  if(gindent_tabs)
     pTabSize->hide();
  else
     pTabSize->show();
  pIndentCode->value(gindent_code);
}
